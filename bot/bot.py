from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *
from secrets import *

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª secrets.py –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:
"""
GPT_TOKEN = '–í–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_GPT'
GPT_BASE_URL = 'Base_url_–¥–ª—è_–≤–∞—à–µ–≥–æ_GPT'
BOT_TOKEN = '–í–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_TelegramBot'
"""


# —Ç—É—Ç –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –Ω–∞—à –∫–æ–¥ :)
async def hello(update, context):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'date':
        await date_dialog(update, context)
    elif dialog.mode == 'message':
        await message_dialog(update, context)
    elif dialog.mode == 'profile':
        await profile_dialog(update, context)
    elif dialog.mode == 'opener':
        await opener_dialog(update, context)
    else:
        first_name = update.message.chat.first_name
        user_name = '@'+update.message.chat.username

        name = first_name or user_name
        text = update.message.text
        await send_photo(update, context, 'avatar_main')
        await send_text(update, context, f'–ü—Ä–∏–≤–µ—Ç *{name}*')
        await send_text(update, context, f'–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏: _{text}_')
        await send_text(update, context, f'–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ª—É—á—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ *–ú–µ–Ω—é*')


async def hello_buttons(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_text(update, context, f'–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *{query.upper()}*')


async def start(update, context):
    dialog.mode = 'main'
    text = load_message('main')
    await send_photo(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
        'profile': '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé',
        'opener': '—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞',
        'message': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà',
        'date': '–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•',
        'gpt': '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†'
    })


async def gpt(update, context):
    dialog.mode = 'gpt'
    dialog.prompt = None
    text = load_message('gpt')
    await send_photo(update, context, 'gpt')
    await send_text(update, context, text)


async def gpt_dialog(update, context):
    if dialog.prompt is None:
        dialog.prompt = load_prompt('gpt')
    query_text = update.message.text
    my_message = await send_text(update, context, '_GPT –æ—Ç–≤–µ—á–∞–µ—Ç..._')
    answer = await chatgpt.send_question(dialog.prompt, query_text)
    dialog.prompt += '\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' + query_text + '\n–û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:\n' + answer
    await  my_message.edit_text(answer)


async def date(update, context):
    dialog.mode = 'date'
    text = load_message('date')
    await send_photo(update, context, 'date')
    await send_text_buttons(update, context, text, {
        'date_grande': '–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
        'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±–∏',
        'date_zendaya': '–ó–µ–Ω–¥–µ—è',
        'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥',
        'date_hardy': '–¢–æ–º –•–∞—Ä–¥–∏'
    })


async def date_buttons(update, context):
    query = update.callback_query.data
    dialog.prompt = load_prompt(query)
    chatgpt.set_prompt(dialog.prompt)
    await update.callback_query.answer()
    await send_photo(update, context, query)
    await send_text(update, context, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏–µ –≤ —á–∞—Ç–µ!')


async def date_dialog(update, context):
    query_text = update.message.text
    my_message = await send_text(update, context, '_–∑–≤–µ–∑–¥–∞ –¥—É–º–∞–µ—Ç..._')
    answer = await chatgpt.add_message(query_text)
    await  my_message.edit_text(answer)


async def message(update, context):
    dialog.mode = 'message'
    text = load_message('message')
    await send_photo(update, context, 'message')
    await send_text_buttons(update, context, text, {
        'message_next': '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'message_date': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ',
    })
    dialog.list.clear()


async def message_buttons(update, context):
    query = update.callback_query.data
    dialog.prompt = load_prompt(query)
    chatgpt.set_prompt(dialog.prompt)
    user_chat_history = "\n\n".join(dialog.list)
    await update.callback_query.answer()
    my_message = await send_text(update, context, '_–ò–ò –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç..._')
    answer = await chatgpt.add_message(user_chat_history)
    dialog.list.append(answer)
    await my_message.edit_text(answer)


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def profile(update, context):
    dialog.mode = 'profile'
    text = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, text)
    dialog.count = 0
    dialog.user.clear()
    await send_text(update, context, dialog.profile_questions[dialog.count][1])


async def profile_dialog(update, context):
    if dialog.count < len(dialog.profile_questions):
        text = update.message.text
        dialog.user[dialog.profile_questions[dialog.count][0]] = text
        dialog.count += 1
        if dialog.count < len(dialog.profile_questions):
            await send_text(update, context, dialog.profile_questions[dialog.count][1])
        else:
            dialog.mode = 'main'
            user_info = dialog_user_info_to_str(dialog.user)
            dialog.prompt = load_prompt('profile')
            chatgpt.set_prompt(dialog.prompt)
            my_message = await send_text(update, context, '_–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å..._')
            answer = await chatgpt.add_message(user_info)
            await my_message.edit_text(answer)


async def opener(update, context):
    dialog.mode = 'opener'
    text = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, text)
    dialog.count = 0
    dialog.user.clear()
    await send_text(update, context, dialog.opener_questions[dialog.count][1])


async def opener_dialog(update, context):
    if dialog.count < len(dialog.opener_questions):
        text = update.message.text
        dialog.user[dialog.opener_questions[dialog.count][0]] = text
        dialog.count += 1
        if dialog.count < len(dialog.opener_questions):
            await send_text(update, context, dialog.opener_questions[dialog.count][1])
        else:
            dialog.mode = 'main'
            user_info = dialog_user_info_to_str(dialog.user)
            dialog.prompt = load_prompt('opener')
            chatgpt.set_prompt(dialog.prompt)
            my_message = await send_text(update, context, '_–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–µ–Ω–µ—Ä..._')
            answer = await chatgpt.add_message(user_info)
            await my_message.edit_text(answer)


dialog = Dialog()
dialog.mode = 'main'
dialog.prompt = None
dialog.list = []
dialog.count = 0
dialog.user = {}
dialog.profile_questions = [
    ('name', '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'),
    ('age', '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?'),
    ('occupation', '–∫–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?'),
    ('hobby', '–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?'),
    ('annoys', '–ß—Ç–æ –≤–∞—Å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –≤ –ª—é–¥—è—Ö?'),
    ('goals', '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?'),
]

dialog.opener_questions = [
    ('name', '–ò–º—è –¥–µ–≤—É—à–∫–∏?'),
    ('age', '–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?'),
    ('handsome', '–û—Ü–µ–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤?'),
    ('occupation', '–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?'),
    ('city', '–ò–∑ –∫–∞–∫–æ–≥–æ –æ–Ω–∞ –≥–æ—Ä–æ–¥–∞?'),
    ('goals', '–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?'),
]

chatgpt = ChatGptService(GPT_BASE_URL, GPT_TOKEN)

app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('date', date))
app.add_handler(CommandHandler('message', message))
app.add_handler(CommandHandler('profile', profile))
app.add_handler(CommandHandler('opener', opener))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))

app.add_handler(CallbackQueryHandler(date_buttons, pattern='^date_.*'))
app.add_handler(CallbackQueryHandler(message_buttons, pattern='^message_.*'))
app.add_handler(CallbackQueryHandler(hello_buttons))

app.run_polling()
